# creates a special "vector", which is really a list containing a function
makeVector <- function(x = numeric()) {
m <- NULL # mean
# 1.set the value of the vector
set <- function(y) {
x <<- y
m <<- NULL
}
# 2.get the value of the vector
get <- function() x
# 3.set the value of the mean
setmean <- function(mean) m <<- mean
# 4.get the value of the mean
getmean <- function() m
# return a list contains functions
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# calculates the mean of the special "vector" created with the above function.
cachemean <- function(x, ...) {
m <- x$getmean() # it first checks to see if the mean has already been calculated.
if(!is.null(m)) { # If so, it gets the mean from the cache and skips the computation.
message("getting cached data")
return(m)
}
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function.
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
num_myvector <- makeVector(c(1,2,3))
num_myvector.get
num_myvector$get
num_myvector$get()
num_myvector$getmean()
num_myvector$setmean()
cachemean(num_myvector$get())
cachemean(num_myvector)
num_myvector$getmean()
list_myvector <- makeVector(c(1,2,3))
list_myvector$getmean()
## Put comments here that give an overall description of what your functions do
# Caching the Inverse of a Matrix
## Write a short comment describing this function
# creates a special "matrix" object that can cache its inverse, which is really a list containing functions
makeCacheMatrix <- function(x = matrix()) {
m <- NULL # inversed matirx
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
# computes the inverse of the special "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if (!is.null(m)) {
message("getting cached inversed matrix")
return(m)
}
mtx_data <- x$get()
m <- solve(mtx_data, ...)
x$setinverse(m)
m  ## Return a matrix that is the inverse of 'x'
}
mtx_origin <- matrix(1:12, 3, 4)
mtx_origin
list_mcm <- makeCacheMatrix(mtx_origin)
class(list_mcm)
list_mcm$getinverse()
cacheSolve(list_mcm)
mtx_origin <- matrix(1:16, 4, 4)
list_mcm <- makeCacheMatrix(mtx_origin)
class(list_mcm)
list_mcm$getinverse()
cacheSolve(list_mcm)
traceback()
?solve
list_mcm$get()
cacheSolve(list_mcm)
cacheSolve(list_mcm)
debug(cacheSolve)
cacheSolve(list_mcm)
View(mtx_data)
solve(mtx_origin)
class(mtx_origin)
solve(mtx_origin)
View(mtx_origin)
solve(mtx_origin)
solve(mtx_origin)
mtx_origin <- matrix(1:4, 2, 2)
list_mcm <- makeCacheMatrix(mtx_origin)
class(list_mcm)
list_mcm$getinverse()
cacheSolve(list_mcm)
solve(mtx_origin)
class(mtx_origin)
list_mcm$getinverse()
cacheSolve(list_mcm)
list_mcm$getinverse()
